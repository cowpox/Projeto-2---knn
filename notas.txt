1) Entender a demanda do projeto

2) Construtor deve permitir 2 inicializações:
    (i) construtor padrão: sem parâmetros, define k = 5;
    (ii) construtor parametrizado: recebe um inteiro de definirá o k;

3) Método fit: etapa de treinamento. Recebe 2 parâmetros:
    (i) array 2D: matriz de treino;
    (ii) array 1D: matriz de labels (classes)
    void: deve armazenar internamente esses parâmetros no objeto para uso na base de conhecimento

4) Método predict: etapa de teste. Recebe 1 parâmetro:
    (i) array 2D: matriz de teste;
    retorno: array 1D com as classes atribuídas

5) Obstáculos:
    No método fit: será necessário informar as dimensões das matrizes na instaciação do objeto knn
    No método predict: será necessário verificar se o método fit foi executado com sucesso

6) Criei um método para inserir no objeto os dados das tabelas
void set_tables(int rows_training, int cols_training, int rows_labels, int rows_testing, int cols_testing);

7) Criado os construtores e destrutores

8) Criado um método de exibição de matrizes (para testes). Optei por utilizar um método único,
tanto para matrizes 2D quanto para arrays 1D. Para não criar outro método, em caso de arrays 1D,
é necessário fazer a conversão para 2D antes (com 1 coluna). Exemplo:
    int* array = new int[3]{15, 4, 75};
    int** array_as_matrix = new int*[3];
    for (int i = 0; i < 3; i++) {
        array_as_matrix[i] = new int[1]; // Cria uma "coluna"
        array_as_matrix[i][0] = array[i];
    }

9) Criadas duas funçoes de conversao: array para matriz e vice-versa

10) Método fit:
a) Validar dados de entrada
b) Verificar consistência dos dados
c) Armazenar os dados de treinamento (matriz de treino e array de labels)
    Copiar os dados em fit é a abordagem mais segura e robusta porque:
        Garante que o objeto KNN tenha controle total sobre sua memória interna.
        Evita problemas de acesso inválido ou modificações externas indesejadas.

11) Revisados construtores e destrutores, para garantir melhor gerenciamento da memória

12) Criei uma sobrecarga no método fit, para receber matriz 1D no lugar de array 1D

13) Método predict:
    a) Validar dados de entrada
    b) Garantir que o modelo foi treinado
    c) Verificar se o número de colunas de treino e teste são iguais
    d) Iterar sobre os exemplos de teste:
        1) calcuar distâncias
        2) encontrar o k vizinhos mais próximos
        3) determinar a classe majoritária
        4) armazenar o resultado

14) Criar métodos auxiliares (modularizar) para o predict:
double calculate_distance(int* a, int* b, int size);
int* find_k_nearest_neighbors(double* distances, int k, int num_examples);
int determine_majority_class(int* neighbors, int k);

15) Iniciados testes
a) inconsistência em k > número de exemplos.
solução: em set_tables:
// Ajustar k para que não exceda o número de exemplos de treinamento
    if (this->k > rows_training) {
        cout << "Aviso: k (" << this->k << ") é maior que o número de exemplos de treinamento (" << rows_training << "). Ajustando k para " << rows_training << "." << endl;
        this->k = rows_training;
    }
b) 
b) re-estrutradas tabelas de testes
c) criada log e tabela de resultados

16) Iniciada implementação de floats. Optei pela sobrecarga de métodos.

17) Necessário criar atributos específicos de float
        float ** mat_training_float; // ponteiro para a matriz de treino
        float * arr_labels_float; // ponteiro para a matriz de labels
        float ** mat_testing_float; // ponteiro para a matriz de teste
        float * arr_prediction_float; // ponteiro para a matriz de predição

18) Criada flag is_float para identificar o método destrutor adequado

19) Ajustado construtor (inicializar is_float = false)

20) Criado metodo de conversao matriz para array de floats:
float* matrix_to_array_float(float ** matrix, int num_registers);

21) Criado métodos calculate_distance_float e determine_majority_class_float

23) Implmentado a sobrecarga do metodo predict

24) Refeito o destrutor, desalocando o tipo correto de dados (int ou float), de acordo com a flag is_float

25) no arquivo Adriano_Brandao
sobrecarga do metodo display_matrix, para exibir floats
sobrecarga do metodo compare_matrices, para comparar floats

26) realizados testes iniciais com floats

27) revisão da classe knn:
*validação de k em find_k_nearest_neighbors
*criação de flag para habilitar/desabilitar logs
*ajuste de arredondamento em determine_majority_class_float

