1) Entender a demanda do projeto

2) Construtor deve permitir 2 inicializações:
    (i) construtor padrão: sem parâmetros, define k = 5;
    (ii) construtor parametrizado: recebe um inteiro de definirá o k;

3) Método fit: etapa de treinamento. Recebe 2 parâmetros:
    (i) array 2D: matriz de treino;
    (ii) array 1D: matriz de labels (classes)
    void: deve armazenar internamente esses parâmetros no objeto para uso na base de conhecimento

4) Método predict: etapa de teste. Recebe 1 parâmetro:
    (i) array 2D: matriz de teste;
    retorno: array 1D com as classes atribuídas

5) Obstáculos:
    No método fit: será necessário informar as dimensões das matrizes na instaciação do objeto knn
    No método predict: será necessário verificar se o método fit foi executado com sucesso

6) Criei um método para inserir no objeto os dados das tabelas
void set_tables(int rows_training, int cols_training, int rows_labels, int rows_testing, int cols_testing);

7) Criado os construtores e destrutores

8) Criado um método de exibição de matrizes (para testes). Optei por utilizar um método único,
tanto para matrizes 2D quanto para arrays 1D. Para não criar outro método, em caso de arrays 1D,
é necessário fazer a conversão para 2D antes (com 1 coluna). Exemplo:
    int* array = new int[3]{15, 4, 75};
    int** array_as_matrix = new int*[3];
    for (int i = 0; i < 3; i++) {
        array_as_matrix[i] = new int[1]; // Cria uma "coluna"
        array_as_matrix[i][0] = array[i];
    }

9) Criadas duas funçoes de conversao: array para matriz e vice-versa

10) Método fit:
a) Validar dados de entrada
b) Verificar consistência dos dados
c) Armazenar os dados de treinamento (matriz de treino e array de labels)
    Copiar os dados em fit é a abordagem mais segura e robusta porque:
        Garante que o objeto KNN tenha controle total sobre sua memória interna.
        Evita problemas de acesso inválido ou modificações externas indesejadas.

11) Revisados construtores e destrutores, para garantir melhor gerenciamento da memória

12) Criei uma sobrecarga no método fit, para receber matriz 1D no lugar de array 1D

